# Generated by multiprof for the '{{.WrapperName}}' wrapper.

# This function ensures that the original '{{.OriginalCmd}}' completions are loaded,
# then dynamically applies those exact completion settings to '{{.WrapperName}}'.
_{{.HookName}}() {
    # If the original command's completions aren't loaded, load them now.
    if ! complete -p {{.OriginalCmd}} &>/dev/null; then
        # Use the official helper to trigger the lazy-load.
        if command -v __load_completion &>/dev/null; then
            __load_completion {{.OriginalCmd}}
        fi
    fi

    # After loading, get the exact 'complete' command for the original tool.
    local original_spec
    original_spec=$(complete -p {{.OriginalCmd}} 2>/dev/null)

    # If a spec was found, apply it to our wrapper by replacing the command name.
    if [[ -n "$original_spec" ]]; then
        eval "${original_spec/ {{.OriginalCmd}}/ {{.WrapperName}}}"
    fi
}

# Register our hook function to be the completer for the wrapper.
complete -F _{{.HookName}} {{.WrapperName}}

